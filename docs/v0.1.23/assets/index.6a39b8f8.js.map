{"version":3,"file":"index.6a39b8f8.js","sources":["../../../vite/modulepreload-polyfill","../../../src/components/Editor.tsx","../../../src/components/ButtonOptionsMenu.tsx","../../../src/store.ts","../../../src/components/CodeResults.tsx","../../../src/hooks/codeHooks.ts","../../../src/hooks/useExecuteCodeWithMetaframe.ts","../../../src/components/ButtonRun.tsx","../../../src/components/ButtonHelp.tsx","../../../src/components/ButtonPresentationMode.tsx","../../../src/routes/home.tsx","../../../src/App.tsx","../../../src/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { FunctionalComponent } from \"preact\";\nimport MonacoEditor from \"@monaco-editor/react\";\nimport { Box } from \"@chakra-ui/react\";\n\nexport type EditorProps = {\n  mode: string;\n  value: string | undefined;\n  setValue: (value: string | undefined) => void;\n  theme: string;\n};\n\nexport const Editor: FunctionalComponent<EditorProps> = ({\n  mode,\n  value,\n  setValue,\n  theme,\n}) => {\n  return (\n    <Box borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\n      <MonacoEditor\n        defaultLanguage={mode}\n        theme={theme}\n        options={{\n          minimap: { enabled: false },\n        }}\n        onChange={setValue}\n        value={value}\n        width=\"100%\"\n        height=\"70vh\"\n      />\n    </Box>\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useEffect, useState, useCallback } from \"preact/hooks\";\nimport { useHashParamJson } from \"@metapages/metaframe-hook\";\nimport {\n  Box,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  Grid,\n  GridItem,\n  IconButton,\n  Input,\n  Select,\n  HStack,\n  Spacer,\n  Switch,\n  Text,\n} from \"@chakra-ui/react\";\nimport { CheckIcon, CloseIcon, SettingsIcon } from \"@chakra-ui/icons\";\n\nexport type OptionType = \"string\" | \"boolean\" | \"option\" | \"number\";\n\nexport type Option = {\n  name: string;\n  displayName: string;\n  default?: string | boolean | number;\n  type?: OptionType; // defaults to string\n  options?: string[];\n  // if the type is \"option\" and there are suboptions then\n  // the suboptions are added to all options\n  suboptions?: { [name in string]: Option[] };\n  validator?: (val: string | boolean | number) => string | undefined; // undefined == 👍, string is an error message\n  map?: (val: string | boolean | number) => any; // convert value to proper type\n};\n\nconst useOptions = (options: Option[], chosenOptions?: GenericOptions) => {\n  const [optionsState, setOptionsState] = useState<Option[]>(options);\n\n  useEffect(() => {\n    let newOptions = options.concat([]);\n    options.forEach((option) => {\n      if (option.type === \"option\" && option.suboptions && chosenOptions) {\n        Object.keys(chosenOptions).forEach((key) => {\n          const val = chosenOptions[key] as string | undefined;\n          if (val && option?.suboptions?.[val]) {\n            newOptions = newOptions.concat(option.suboptions[val]);\n          }\n        });\n      }\n    });\n\n    setOptionsState(newOptions);\n  }, [chosenOptions, setOptionsState, options]);\n\n  return [optionsState];\n};\n\nexport const ButtonOptionsMenu: FunctionalComponent<{\n  options: Option[];\n  hashkey?: string;\n}> = ({ hashkey, options }) => {\n  const [open, setOpen] = useState<boolean>(false);\n\n  const onClick = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Metaframe settings\"\n        // @ts-ignore\n        icon={<SettingsIcon />}\n        size=\"md\"\n        onClick={onClick}\n      />\n      <OptionsMenu\n        hashkey={hashkey}\n        isOpen={open}\n        setOpen={setOpen}\n        options={options}\n      />\n    </>\n  );\n};\n\nexport type GenericOptions = Record<string, string | boolean | number | undefined>;\n\nconst OptionsMenu: FunctionalComponent<{\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n  options: Option[];\n  hashkey?: string;\n}> = ({ hashkey, isOpen, setOpen, options }) => {\n  // isOpen = true; // for debugging/developing\n\n  const [optionsInHashParams, setOptionsInHashParams] =\n    useHashParamJson<GenericOptions>(\n      hashkey ? hashkey : \"options\",\n      Object.fromEntries(\n        options\n          .filter((o) => o.default)\n          .map((option) => [option!.name!, option!.default!])\n      )\n    );\n\n  const [localOptions, setLocalOptions] = useState<GenericOptions>(\n    optionsInHashParams || {}\n  );\n\n  const [filteredOptions] = useOptions(options, localOptions);\n\n  const [errors, setErrors] = useState<Record<string, string> | undefined>(\n    undefined\n  );\n\n  const handleOnChange = useCallback(\n    (event: any) => {\n      const { name, value } = event.target as HTMLInputElement;\n      let flattenedOptions = options.concat([]);\n      options.forEach((o) => {\n        if (o.suboptions) {\n          const arrays = Object.values(o.suboptions);\n          arrays.forEach(\n            (oo) => (flattenedOptions = flattenedOptions.concat(oo))\n          );\n        }\n      });\n\n      const option = flattenedOptions.find((o) => o.name === name) as Option; // assume we always find one since we configured it from options\n      // save boolean true as \"1\"\n      if (!option) {\n        console.error(`No option found for name=${name}`);\n        return;\n      }\n      if (option.type === \"boolean\") {\n        setLocalOptions({ ...localOptions, [name]: value === \"1\" });\n      // } else if (option.type === \"number\") {\n      //   setLocalOptions({ ...localOptions, [name]: value !== undefined && value !== \"\" ? parseFloat(value) : undefined });\n      } else {\n        setLocalOptions({ ...localOptions, [name]: value });\n      }\n    },\n    [localOptions, setLocalOptions, options]\n  );\n\n  const onClose = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  const onCloseAndAccept = useCallback(() => {\n    // first validate if available\n    const maybeErrors: Record<string, string> = {};\n    Object.keys(localOptions).forEach((key) => {\n      const option: Option | undefined = options.find((o) => o.name === key);\n      if (option && option.validator && option.type !== \"boolean\") {\n        const errorFromOption = option.validator(localOptions[key] as string);\n        if (errorFromOption) {\n          maybeErrors[key] = errorFromOption;\n        }\n      }\n    });\n    if (Object.keys(maybeErrors).length > 0) {\n      setErrors(maybeErrors);\n      return;\n    }\n    setErrors(undefined);\n\n    // assume valid!\n    // now maybe map to other values\n    const convertedOptions: GenericOptions = {};\n    Object.keys(localOptions).forEach((key) => {\n      const option: Option | undefined = filteredOptions.find(\n        (o) => o.name === key\n      );\n      if (localOptions[key] === undefined) {\n        return;\n      }\n      if (option !== undefined) {\n        if (option.map) {\n          // user supplied mapping function from hash param value to user converted value\n          convertedOptions[key] = option.map(localOptions[key]!);\n        } else {\n          if (option.type === \"boolean\") {\n            convertedOptions[key] =\n              localOptions[key] === true ||\n              localOptions[key] === \"1\" ||\n              localOptions[key] === \"true\";\n          } else if (option.type === \"number\") {\n            convertedOptions[key] = typeof(localOptions[key]) === \"string\" ? parseFloat(localOptions[key] as string) : localOptions[key];\n          } else {\n            convertedOptions[key] = localOptions[key];\n          }\n        }\n      } else {\n        convertedOptions[key] = localOptions[key];\n      }\n    });\n\n    setOpen(!isOpen);\n    setOptionsInHashParams(convertedOptions);\n  }, [\n    setOpen,\n    isOpen,\n    options,\n    localOptions,\n    filteredOptions,\n    setOptionsInHashParams,\n    setErrors,\n  ]);\n\n  // preact complains in dev mode if this is moved out of a functional component\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n    const onKeyup = (e: KeyboardEvent) => {\n      if (e.key === \"Enter\" && isOpen) onCloseAndAccept();\n    };\n    window.addEventListener(\"keyup\", onKeyup);\n    return () => {\n      window.removeEventListener(\"keyup\", onKeyup);\n    };\n  }, [onCloseAndAccept, isOpen]);\n\n  return (\n    <Drawer placement=\"top\" onClose={onCloseAndAccept} isOpen={isOpen}>\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"0px\">\n            Configure metaframe (stored in URL hash params )\n          </DrawerHeader>\n          <DrawerBody>\n            <Box\n              maxW=\"80%\"\n              p={2}\n              borderWidth=\"4px\"\n              borderRadius=\"lg\"\n              overflow=\"hidden\"\n            >\n              <Grid templateColumns=\"repeat(12, 1fr)\" gap={6}>\n                {filteredOptions.map((option) => (\n                  <>\n                    <GridItem rowSpan={1} colSpan={4}>\n                      <Box\n                        w=\"100%\"\n                        h=\"100%\"\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        justifyContent=\"flex-end\"\n                      >\n                        <Text textAlign={\"right\"} verticalAlign=\"bottom\">\n                          {option.displayName || option.name}:\n                        </Text>\n                      </Box>\n                    </GridItem>\n                    <GridItem rowSpan={1} colSpan={8}>\n                      {\" \"}\n                      {renderInput(\n                        option,\n                        localOptions[option.name],\n                        handleOnChange\n                      )}\n                    </GridItem>\n                  </>\n                ))}\n\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}>\n                  <HStack spacing={2} direction=\"row\">\n                    <Spacer />\n                    {/*\n                      // @ts-ignore */}\n                    <IconButton\n                      size=\"lg\"\n                      color=\"red\"\n                      icon={(<CloseIcon />) as any}\n                      onClick={onClose}\n                    />\n\n                    {/*\n                      // @ts-ignore */}\n                    <IconButton\n                      size=\"lg\"\n                      color=\"green\"\n                      icon={(<CheckIcon />) as any}\n                      onClick={onCloseAndAccept}\n                    />\n                  </HStack>\n                </GridItem>\n              </Grid>\n            </Box>\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n\nconst renderInput = (option: Option, value: any, onChange: any) => {\n  switch (option.type) {\n    case \"option\":\n      return (\n        <Select\n          name={option.name}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Select option\"\n        >\n          {option.options!.map((optionChoice) => (\n            <option value={optionChoice}>{optionChoice}</option>\n          ))}\n        </Select>\n      );\n    case \"boolean\":\n      return (\n        <Switch\n          name={option.name}\n          // @ts-ignore\n          rightIcon={<CheckIcon />}\n          onChange={onChange}\n          isChecked={value === true || value === \"1\"}\n          value={value ? 0 : 1}\n        />\n      );\n    default:\n      return (\n        <Box w=\"100%\" h=\"10\">\n          <Input\n            name={option.name}\n            type=\"text\"\n            placeholder=\"\"\n            value={value === undefined ? option.default : value}\n            onInput={onChange}\n          />\n        </Box>\n      );\n  }\n};\n","import create from \"zustand\";\nimport { CodeResult } from \"./hooks/codeHooks\";\n\nexport type MessagePayload = {\n  message: string;\n  type: \"error\" | \"warning\" | \"info\";\n  messages?: string[];\n};\n\nexport enum Mode {\n  Start,\n  Editing,\n  Running,\n  Finished,\n}\n\nexport type StoreState = {\n  code: string | undefined;\n  result: CodeResult<any> | undefined;\n  mode: Mode;\n  setCode: (code: string | undefined) => void;\n  setResult: (result: CodeResult<any> | undefined) => void;\n  setMode: (mode: Mode) => void;\n};\n\nexport const useStore = create<StoreState>((set) => ({\n  code: undefined,\n  result: undefined,\n  mode: Mode.Start,\n  setCode: (code: string | undefined) => set((state) => ({ code })),\n  setResult: (result: CodeResult<any> | undefined) =>\n    set((state) => ({ result })),\n  setMode: (mode: Mode) => set((state) => ({ mode })),\n}));\n","import { FunctionalComponent } from \"preact\";\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from \"@chakra-ui/react\";\nimport { useStore, Mode } from \"../store\";\nimport { BeatLoader } from \"react-spinners\";\nimport { useHashParamBoolean } from \"@metapages/metaframe-hook\";\n\nexport const CodeResults: FunctionalComponent = () => {\n  const mode = useStore((state) => state.mode);\n  const result = useStore((state) => state.result);\n  // presentation mode means hide all the editing stuff\n  const [isPresentationMode] = useHashParamBoolean(\"presentation\");\n\n  if (Mode.Running === mode) {\n    return <BeatLoader size={8} color=\"blue\" />;\n  }\n  if (!result || isPresentationMode) {\n    return null;\n  }\n\n  if (result.failure) {\n    return (\n      <>\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertTitle mr={2}>\n            Error\n            {result?.failure?.phase ? \" in phase \" + result.failure.phase : \"\"}\n          </AlertTitle>\n        </Alert>\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertDescription>{`${result.failure?.error}`}</AlertDescription>\n        </Alert>\n      </>\n    );\n  } else {\n    return (\n      <Alert status=\"success\">\n        <AlertIcon />\n      </Alert>\n    );\n  }\n};\n","export interface CodeFailure {\n    error: any\n    phase?: string\n}\n\nexport interface CodeResult<R> {\n    failure?: CodeFailure;\n    // can be a cancel function\n    result?: R;\n}\n\nconst AsyncFunction = Object.getPrototypeOf(async function () { }).constructor\n\nexport const execJsCode = <R = any>(code: string, context: Record<string, any>): Promise<CodeResult<R>> => {\n    let exec = null\n    let args = Object.keys(context)\n    try {\n        // exec takes a single param 'exports', for which we provide an empty object.\n        // This is because whenever you import modules in the user-provided code, the TS compiler wants to\n        // define a magic property on the implicit `exports` variable to indicate the user code is also an ES module.\n        // It errors out if that implicit `exports` variable is undefined.\n        //\n        // The returned anonymous function takes a single param `context` which we provide at execution time.\n        // context is used to pass in the metaframe object\n        exec = AsyncFunction('exports', `\"use strict\"; return (async function(${args.join(', ')}){${code}})`)({}) // eslint-disable-line\n    } catch (e) {\n        return Promise.resolve({ failure: { error: e, phase: 'compile' } })\n    }\n\n    if (exec) {\n        var phase = 'exec'\n        let values = Object.values(context);\n        if (exec.apply) {\n            return exec.apply(null, values)\n            .then((r: any) => ({ result: r }))\n            .catch((e: any) => ({ failure: { error: e, phase } }))\n        } else {\n            return exec.then((a :typeof AsyncFunction) => {\n                return a.apply(null, values);\n            })\n            .then((r: any) => ({ result: r,  }))\n            .catch((e: any) => ({ failure: { error: e, phase } }))\n        }\n    }\n\n    return Promise.resolve({ failure: { error: 'compile failed', phase: 'compile' } })\n}\n","import { useCallback, useEffect } from \"preact/hooks\";\nimport { execJsCode } from \"../hooks/codeHooks\";\nimport { Mode, useStore } from \"/@/store\";\nimport * as metaframeHooks from \"@metapages/metaframe-hook\";\nimport * as BABYLON from \"babylonjs\";\nimport \"babylonjs-loaders\";\n\n// Exports lazy code executor\nexport const useExecuteCodeWithMetaframe: () => [\n  (c: string | undefined) => Promise<void>,\n  any\n] = () => {\n  const metaframeObject = metaframeHooks.useMetaframe();\n  const setMode = useStore((state) => state.setMode);\n  const setResult = useStore((state) => state.setResult);\n  const result = useStore((state) => state.result);\n\n  // if new results, cancel existing running code\n  useEffect(() => {\n    return () => {\n      if (result?.result && typeof result?.result === \"function\") {\n        try {\n          result.result();\n        } catch (err) {\n          console.error(\"Failed to cancel without error:\", err);\n        }\n      }\n    };\n  }, [result]);\n\n  const execute = useCallback(\n    async (code: string | undefined) => {\n      if (!code || code.trim().length === 0) {\n        setMode(Mode.Finished);\n        setResult(undefined);\n        return;\n      }\n      if (!metaframeObject.metaframe) {\n        return;\n      }\n      setResult(undefined);\n      try {\n        const result = await execJsCode(code, {\n          metaframe: metaframeObject.metaframe,\n          BABYLON,\n          HASHTOOLS: metaframeHooks,\n        });\n        setResult(result);\n      } catch (err) {\n        console.error(err);\n        setResult({ failure: { error: err } });\n      }\n      setMode(Mode.Finished);\n    },\n    [metaframeObject.metaframe, setMode, setResult]\n  );\n\n  return [execute, result];\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useCallback } from \"preact/hooks\";\nimport { IconButton } from \"@chakra-ui/react\";\nimport { EditIcon, CheckIcon } from \"@chakra-ui/icons\";\n\nimport {\n  MetaframeObject,\n  useMetaframe,\n  useHashParamBase64,\n} from \"@metapages/metaframe-hook\";\nimport { Mode, useStore } from \"../store\";\n\nexport const ButtonRun: FunctionalComponent = () => {\n  const metaframe: MetaframeObject = useMetaframe();\n  const mode = useStore((state) => state.mode);\n  const setMode = useStore((state) => state.setMode);\n  const codeInStore = useStore((state) => state.code);\n\n  // Split these next two otherwise editing is too slow as it copies to/from the URL\n  const [valueHashParam, setValueHashParam] = useHashParamBase64(\n    \"text\",\n    undefined\n  );\n\n  const onClick = useCallback(() => {\n    switch (mode) {\n      case Mode.Editing:\n        // If the values are different, update, this will trigger a new execution\n        if (valueHashParam !== codeInStore) {\n          setValueHashParam(codeInStore);\n        }\n        setMode(Mode.Running);\n        break;\n      case Mode.Finished:\n        setMode(Mode.Editing);\n        break;\n      case Mode.Running:\n        setMode(Mode.Editing);\n        break;\n      case Mode.Start:\n        break;\n    }\n  }, [\n    metaframe.metaframe,\n    codeInStore,\n    valueHashParam,\n    setValueHashParam,\n    mode,\n    setMode,\n  ]);\n\n  return (\n    <IconButton\n      verticalAlign=\"top\"\n      aria-label=\"Help\"\n      colorScheme={mode === Mode.Editing ? \"blue\" : undefined}\n      // @ts-ignore\n      icon={mode === Mode.Editing ? <CheckIcon /> : <EditIcon />}\n      size=\"md\"\n      onClick={onClick}\n      mr=\"4\"\n    />\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useCallback, useState } from \"preact/hooks\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerBody,\n  IconButton,\n  DrawerCloseButton,\n} from \"@chakra-ui/react\";\nimport { isIframe, getHashParamsInWindow } from \"@metapages/metaframe-hook\";\nimport { QuestionIcon } from \"@chakra-ui/icons\";\n\nexport const ButtonHelp: FunctionalComponent<{ url?: string }> = ({ url }) => {\n  const [open, setOpen] = useState<boolean>(\n    isIframe() || getHashParamsInWindow()[1][\"text\"] !== undefined\n      ? false\n      : true\n  );\n\n  url = url\n    ? url\n    : `${window.location.origin}${window.location.pathname}/README.md`;\n\n  const onClick = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Help\"\n        // @ts-ignore\n        icon={<QuestionIcon />}\n        size=\"md\"\n        onClick={onClick}\n        mr=\"4\"\n      />\n      <HelpPanel url={url} isOpen={open} setOpen={setOpen} />\n    </>\n  );\n};\n\nconst HelpPanel: FunctionalComponent<{\n  url: string;\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n}> = ({ isOpen, setOpen, url }) => {\n  const onClose = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  const onOverlayClick = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const iframeUrl = `https://metapages.github.io/metaframe-markdown/#?url=${url}`;\n\n  return (\n    <Drawer\n      size=\"full\"\n      placement=\"top\"\n      onClose={onClose}\n      isOpen={isOpen}\n      onOverlayClick={onOverlayClick}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton size=\"lg\" bg=\"gray.100\" />\n          <DrawerBody>\n            <iframe width=\"100%\" height=\"100%\" src={iframeUrl} />\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useCallback } from \"preact/hooks\";\nimport { IconButton } from \"@chakra-ui/react\";\nimport { useHashParamBoolean } from \"@metapages/metaframe-hook\";\nimport { ViewIcon } from \"@chakra-ui/icons\";\n\nexport const ButtonPresentationMode: FunctionalComponent = () => {\n  const [presentationMode, setPresentationMode] = useHashParamBoolean(\n    \"presentation\",\n    undefined\n  );\n\n  const onClick = useCallback(() => {\n    setPresentationMode(!presentationMode);\n    window.location.reload();\n  }, [presentationMode, setPresentationMode]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Help\"\n        // @ts-ignore\n        icon={<ViewIcon />}\n        size=\"md\"\n        onClick={onClick}\n        mr=\"4\"\n      />\n    </>\n  );\n};\n","/**\n * Simple:\n *  - any input sets\n *    - the content to the editor\n *    - the name to the input name\n *    - the save button is deactivated\n *  The save button sends the editor content to the same input name\n */\n\nimport { FunctionalComponent } from \"preact\";\nimport { useEffect } from \"preact/hooks\";\nimport { Box, Flex, Spacer, VStack } from \"@chakra-ui/react\";\nimport {\n  useHashParamJson,\n  useHashParamBase64,\n  useHashParamBoolean,\n} from \"@metapages/metaframe-hook\";\nimport { Editor } from \"/@/components/Editor\";\nimport { Option, ButtonOptionsMenu } from \"../components/ButtonOptionsMenu\";\nimport { CodeResults } from \"/@/components/CodeResults\";\nimport { Mode, useStore } from \"/@/store\";\nimport { useExecuteCodeWithMetaframe } from \"/@/hooks/useExecuteCodeWithMetaframe\";\nimport { ButtonRun } from \"/@/components/ButtonRun\";\nimport { ButtonHelp } from \"/@/components/ButtonHelp\";\nimport { ButtonPresentationMode } from \"../components/ButtonPresentationMode\";\n\nconst appOptions: Option[] = [\n  {\n    name: \"theme\",\n    displayName: \"Light/Dark theme\",\n    default: \"light\",\n    type: \"option\",\n    options: [\"light\", \"vs-dark\"],\n  },\n  {\n    name: \"menuAtBottom\",\n    displayName: \"Place menu bar at bottom of render content\",\n    default: false,\n    type: \"boolean\",\n  },\n];\n\ntype OptionBlob = {\n  theme: string;\n  menuAtBottom: boolean;\n};\n\nexport const Route: FunctionalComponent = () => {\n  // metaframe configuration\n  const [options] = useHashParamJson<OptionBlob>(\"options\", {\n    theme: \"light\",\n    menuAtBottom: false,\n  });\n  // presentation mode means hide all the editing stuff\n  const [isPresentationMode] = useHashParamBoolean(\"presentation\");\n  const codeInStore = useStore((state) => state.code);\n  const setCodeInStore = useStore((state) => state.setCode);\n  const mode = useStore((state) => state.mode);\n  const setMode = useStore((state) => state.setMode);\n  const [runCode] = useExecuteCodeWithMetaframe();\n\n  // Split these next two otherwise editing is too slow as it copies to/from the URL\n  const [valueHashParam] = useHashParamBase64(\"text\", undefined);\n\n  // If state === Mode.Start, transition to Mode.Running.\n  // If there is no code, it's a no-op\n  useEffect(() => {\n    if (mode === Mode.Start) {\n      setMode(Mode.Running);\n    }\n  }, [mode, setMode]);\n\n  // If state === Mode.Running, exec the code\n  useEffect(() => {\n    if (mode !== Mode.Running) {\n      return;\n    }\n\n    // The code values are the same, but the user clicked the button, so execute\n    if (runCode) {\n      runCode(codeInStore);\n    }\n  }, [mode, codeInStore, runCode]);\n\n  // source of truth: the URL param #?text=<HashParamBase64>\n  // if that changes, set the local value\n  // the local value changes fast from editing\n  useEffect(() => {\n    setCodeInStore(valueHashParam);\n    if (runCode) {\n      runCode(valueHashParam);\n    }\n  }, [valueHashParam, setCodeInStore, runCode]);\n\n  const canvas = (\n    <canvas\n      width={document.body.clientWidth}\n      height={document.body.clientHeight}\n      id=\"renderCanvas\"\n    />\n  );\n  if (isPresentationMode) {\n    return canvas;\n  }\n\n  const menu = (\n    <VStack spacing={2} alignItems=\"flex-start\">\n      <Flex width=\"100%\">\n        <ButtonRun />\n        <Spacer />\n        <ButtonPresentationMode />\n        <ButtonHelp />\n        <ButtonOptionsMenu options={appOptions} />\n      </Flex>\n      <CodeResults />\n    </VStack>\n  );\n\n  return (\n    <Box w=\"100%\" p={2}>\n      <VStack spacing={2} alignItems=\"flex-start\">\n        {options?.menuAtBottom ? null : <Box w=\"100%\">{menu}</Box>}\n\n        {mode === Mode.Editing ? (\n          <Box w=\"100%\">\n            <Editor\n              mode=\"javascript\"\n              theme={options?.theme || \"light\"}\n              setValue={setCodeInStore}\n              value={codeInStore}\n            />\n          </Box>\n        ) : codeInStore && codeInStore.length > 0 ? (\n          canvas\n        ) : null}\n\n        {options?.menuAtBottom ? <Box w=\"100%\">{menu}</Box> : null}\n      </VStack>\n    </Box>\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { Route as Home } from \"/@/routes/home\";\n\nexport const App: FunctionalComponent = () => {\n  return <Home />;\n};\n","import { render } from \"preact\";\nimport { WithMetaframe } from \"@metapages/metaframe-hook\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { App } from \"./App\";\n\nrender(\n  <ChakraProvider>\n    <WithMetaframe>\n      <App />\n    </WithMetaframe>\n  </ChakraProvider>,\n  document.getElementById(\"root\")!\n);\n"],"names":["MonacoEditor","useState","useCallback","useHashParamJson","DrawerOverlay","DrawerHeader","DrawerBody","useHashParamBoolean","BeatLoader","metaframeHooks.useMetaframe","useMetaframe","useHashParamBase64","isIframe","getHashParamsInWindow","DrawerCloseButton","Home","render","WithMetaframe"],"mappings":"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"}